name: Custom CodeQL Security Analysis

on:
  push:
    branches: [ main, CodeQL-email-header ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: 'false'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  analyze:
    name: Security Analysis with Custom Rules
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install any project dependencies if they exist
        if [ -f requirements.txt ]; then 
          echo "Installing requirements.txt"
          pip install -r requirements.txt
        fi
        if [ -f requirements-dev.txt ]; then 
          echo "Installing requirements-dev.txt"
          pip install -r requirements-dev.txt
        fi
        # Install common email/web dependencies for analysis
        pip install email-validator smtplib-ssl-context || true
        
    - name: Make setup script executable
      run: chmod +x .github/scripts/setup-custom-codeql.sh
      
    - name: Setup Custom CodeQL Environment
      run: ./.github/scripts/setup-custom-codeql.sh
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config: |
          paths:
            - src/
            - lib/
          paths-ignore:
            - tests/
            - test/
            - docs/
            - '**/*.md'
            - '**/__pycache__'
            - '**/venv'
            - '**/node_modules'
          packs:
            python:
              - .github/codeql/ryudes-python-email
        setup-python-dependencies: false
        
    - name: Create test vulnerable code for validation
      run: |
        mkdir -p validation_test/
        cat > validation_test/vulnerable_email.py << 'EOF'
        #!/usr/bin/env python3
        """
        Test vulnerable code to validate custom CodeQL rules
        This should trigger our email header injection detection
        """
        import smtplib
        import os
        from email.mime.multipart import MIMEMultipart
        from email.mime.text import MIMEText
        
        def vulnerable_send_confirmation_email(display_name, user_email, order_id):
            """
            This function has email header injection vulnerabilities
            that our custom rules should detect
            """
            # VULNERABILITY 1: Direct user input in email headers
            msg = MIMEMultipart()
            msg["To"] = f"{display_name} <{user_email}>"  # display_name and user_email flow to header
            msg["Subject"] = f"Order Confirmation for {display_name} - Order #{order_id}"  # order_id flows to header
            msg["From"] = os.getenv("SMTP_FROM", "noreply@company.com")
            
            # Email body
            body = f"""
            Dear {display_name},
            
            Thank you for your order #{order_id}.
            We will send updates to {user_email}.
            
            Best regards,
            The Team
            """
            msg.attach(MIMEText(body, 'plain'))
            
            # VULNERABILITY 2: SMTP envelope injection via user data
            smtp_server = smtplib.SMTP('localhost', 587)
            smtp_server.sendmail(
                os.getenv("SMTP_FROM", "noreply@company.com"), 
                [user_email],  # user_email flows to SMTP envelope
                msg.as_string()
            )
            smtp_server.quit()
            
        def another_vulnerable_function(customer_name, recipient_email):
            """Another test case for our rules"""
            message = MIMEText("Hello")
            message["To"] = recipient_email  # Direct assignment
            message["Subject"] = f"Welcome {customer_name}"  # String formatting
            
            # Send via SMTP
            server = smtplib.SMTP('localhost')
            server.send_message(message, to_addrs=[recipient_email])  # send_message method
            server.quit()
        
        # Test usage that should trigger detections
        if __name__ == "__main__":
            # These calls should be flagged by our rules
            vulnerable_send_confirmation_email(
                "John\r\nBcc: admin@evil.com",  # Malicious display_name
                "user@example.com", 
                "12345"
            )
            
            another_vulnerable_function(
                "Evil\r\nCc: victim@company.com",  # Malicious customer_name
                "test@example.com"
            )
        EOF
        
        echo "✅ Created validation test file: validation_test/vulnerable_email.py"
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true
        
    - name: Run Custom Queries Standalone for Detailed Results
      if: always()
      run: |
        echo "🔍 Running custom queries for detailed analysis..."
        
        # Find the CodeQL database created by the action
        DB_PATH=""
        for db_dir in /home/runner/work/_temp/codeql_databases/*; do
          if [ -d "$db_dir" ] && [[ $(basename "$db_dir") == *"python"* ]]; then
            DB_PATH="$db_dir"
            break
          fi
        done
        
        if [ -z "$DB_PATH" ]; then
          echo "❌ Could not find CodeQL database"
          ls -la /home/runner/work/_temp/codeql_databases/ || true
          exit 1
        fi
        
        echo "✅ Found CodeQL database: $DB_PATH"
        
        # Create results directory
        mkdir -p custom-results/
        
        # Run each custom query individually
        cd .github/codeql/ryudes-python-email
        
        for query in queries/*.ql; do
          if [ -f "$query" ]; then
            query_name=$(basename "$query" .ql)
            echo "🔍 Running query: $query_name"
            
            # Run query and capture results
            if codeql query run "$query" --database="$DB_PATH" --output="../../../custom-results/${query_name}.bqrs"; then
              echo "  ✅ Query executed successfully"
              
              # Decode results to CSV for human reading
              if codeql bqrs decode "../../../custom-results/${query_name}.bqrs" --format=csv --output="../../../custom-results/${query_name}.csv"; then
                echo "  ✅ Results decoded to CSV"
                
                # Show first few results
                if [ -f "../../../custom-results/${query_name}.csv" ]; then
                  result_count=$(tail -n +2 "../../../custom-results/${query_name}.csv" | wc -l)
                  echo "  📊 Found $result_count results"
                  
                  if [ $result_count -gt 0 ]; then
                    echo "  🔍 Sample results:"
                    head -5 "../../../custom-results/${query_name}.csv"
                  fi
                fi
              else
                echo "  ⚠️ Failed to decode results"
              fi
            else
              echo "  ❌ Query execution failed"
            fi
            echo ""
          fi
        done
        
        cd ../../..
        
    - name: Upload Custom Query Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: custom-codeql-results
        path: |
          custom-results/
          validation_test/
          
    - name: Validate Custom Rules Effectiveness
      if: always()
      run: |
        echo "🧪 Validating that custom rules detected vulnerabilities..."
        
        total_findings=0
        successful_queries=0
        
        for csv_file in custom-results/*.csv; do
          if [ -f "$csv_file" ]; then
            query_name=$(basename "$csv_file" .csv)
            findings=$(tail -n +2 "$csv_file" 2>/dev/null | wc -l)
            echo "  📊 $query_name: $findings findings"
            
            if [ $findings -gt 0 ]; then
              total_findings=$((total_findings + findings))
              successful_queries=$((successful_queries + 1))
              
              echo "    ✅ $query_name detected vulnerabilities:"
              # Show actual findings (first 3 lines after header)
              tail -n +2 "$csv_file" | head -3 | while read -r line; do
                echo "      🔍 $line"
              done
            fi
          fi
        done
        
        echo ""
        echo "📈 CUSTOM RULES VALIDATION SUMMARY:"
        echo "  🎯 Total findings across all rules: $total_findings"
        echo "  ✅ Rules that found vulnerabilities: $successful_queries"
        
        if [ $total_findings -gt 0 ]; then
          echo "  🎉 SUCCESS: Custom rules detected vulnerabilities in test code!"
          echo "  🔒 Your email header injection detection is working correctly."
        else
          echo "  ⚠️  WARNING: No vulnerabilities detected"
          echo "  🔍 This might indicate:"
          echo "     - Rules need adjustment for the test patterns"
          echo "     - Database creation issues" 
          echo "     - Query logic needs refinement"
          echo ""
          echo "  📋 Debug information:"
          echo "     - Check uploaded artifacts for detailed query results"
          echo "     - Review validation_test/vulnerable_email.py for expected patterns"
          echo "     - Verify custom queries compile and execute without errors"
        fi
        
        # Set step outcome based on results
        if [ $total_findings -gt 0 ]; then
          echo "SUCCESS=true" >> $GITHUB_OUTPUT
        else
          echo "SUCCESS=false" >> $GITHUB_OUTPUT
        fi
